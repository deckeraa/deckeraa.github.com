<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lorem ipsum</title>
  <link href="http://blog.example.comindex.xml" rel="self" />
  <link href="http://blog.example.com"/>
  <updated>Lisp error in nil: (wrong-type-argument integerp nil)</updated>
  <id>http://blog.example.comindex.xml</id>
  <entry><title type="html">Style Guidelines Revisited</title><author><name>nil</name></author><link href="http://blog.example.com/blog/2012/09/10_style-guidelines-revisited.html"/><updated>2012-09-10T03:25:00Z</updated><published>2012-09-10T03:25:00Z</published><id>blog/2012/09/10_style-guidelines-revisited.html</id><category scheme="/tags/style.html" term="style" label="style"/><content type="html">&lt;p&gt;
  Coding style guidelines are great.
  They keep code looking consistent and can improve readability.
  As a result, many quality, widely-accepted coding styles exist
  &amp;ndash; K&amp;amp;R, GNU, Whitesmith are a few examples &amp;ndash; and are already
  loaded into IDE's such as Emacs or NetBeans. 
  This makes me wonder: Why do certain universities insist
  on creating their own style guidelines?
&lt;/p&gt;
&lt;p&gt;
  I was recently reading through the "programming ground rules" of a course
  at a certain university, which will remain unnamed.
  For context, this course uses C++ as the main language for the course.
  While many of the guidelines are good ideas and common sense,
  I came across some interesting rules.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Use the // comment style."
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  "Only use the &lt;code&gt;/* */&lt;/code&gt; comment style to
  temporarily comment out chunks of your program for testing and debugging." 
    I must admit I was a little confused by this one.
    Comments compile out.
    Additionally, all the editors I know of 
    are able to deal with both commenting styles.
    I just can't see how this affects readability.
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Every&lt;/i&gt; function needs a doc banner.
    Even getters, setters, and the following function.



&lt;pre class="src src-cpp"&gt;&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;class&lt;/span&gt; &lt;span style="color: #8cd0d3;"&gt;Stack&lt;/span&gt;
{
&lt;span style="color: #f0dfaf; font-weight: bold;"&gt;public&lt;/span&gt;:
   &lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;-----------------------------------&lt;/span&gt;
   &lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;Returns true if the stack is empty.&lt;/span&gt;
   &lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;-----------------------------------&lt;/span&gt;
   &lt;span style="color: #8cd0d3;"&gt;bool&lt;/span&gt; &lt;span style="color: #8cd0d3;"&gt;isEmpty&lt;/span&gt;() { &lt;span style="color: #7f9f7f;"&gt;/* &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;. . . */&lt;/span&gt; }
   &lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;...&lt;/span&gt;
};
&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;
  Thankfully, a few rules from previous courses were noticeably absent.
  Arguments no longer must be labeled in a 
  comment block as "in, out, or in/out".
  Do I have a problem with such labels?
  No, but when they are unnecessary they tend to &lt;i&gt;reduce&lt;/i&gt; the readability
  of the comments. 
  Take the following two functions for example.
  Yes, the function is deliberately simplified, but how much of your C++ code consists
  of such functions?
&lt;/p&gt;



&lt;pre class="src src-cpp"&gt;&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;isOutOfBounds( int x, int y)&lt;/span&gt;
&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;Returns true if the coordinates are in bounds.&lt;/span&gt;
&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;Returns false otherwise.&lt;/span&gt;
&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;ARGS: IN, IN&lt;/span&gt;
&lt;span style="color: #8cd0d3;"&gt;bool&lt;/span&gt; &lt;span style="color: #8cd0d3;"&gt;isOutOfBounds&lt;/span&gt;( &lt;span style="color: #8cd0d3;"&gt;int&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;x&lt;/span&gt;, &lt;span style="color: #8cd0d3;"&gt;int&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;y&lt;/span&gt; );
&lt;/pre&gt;


&lt;p&gt;
  or
&lt;/p&gt;



&lt;pre class="src src-cpp"&gt;&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;Checks to see if the given coordinates &lt;/span&gt;
&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;are in bounds of the window.&lt;/span&gt;
&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;Note that x and y are expressed in screen coordinates,&lt;/span&gt;
&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;that is, origin at the top left corner, &lt;/span&gt;
&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;with the first quadrant being on screen.&lt;/span&gt;
&lt;span style="color: #8cd0d3;"&gt;bool&lt;/span&gt; &lt;span style="color: #8cd0d3;"&gt;isOutOfBounds&lt;/span&gt;( &lt;span style="color: #8cd0d3;"&gt;int&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;x&lt;/span&gt;, &lt;span style="color: #8cd0d3;"&gt;int&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;y&lt;/span&gt; );
&lt;/pre&gt;


&lt;p&gt;
  The second declaration, though not rigidly formatted, provides far more
  information than the first.
  Also note this use of upper-case to convey that 1960's COBOL kind of feeling.
&lt;/p&gt;
&lt;p&gt;
  Also gone form the rules is the "30-line function limit", where points
  would be taken off for any function longer than 30 lines.
  While written to encourage modular design, the rule also encourages
  "code golf", where esoteric programming constructs and obscure evaluation
  rules help to fit the function inside of the line limit.
&lt;/p&gt;
&lt;p&gt;
  Take the following code snippets. Do they do the same thing?
&lt;/p&gt;



&lt;pre class="src src-cpp"&gt;&lt;span style="color: #8cd0d3;"&gt;void&lt;/span&gt; &lt;span style="color: #8cd0d3;"&gt;push&lt;/span&gt;( &lt;span style="color: #8cd0d3;"&gt;float&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;obj_to_push&lt;/span&gt; )
{
   stack_data[current_index++] = obj_to_push;
}

&lt;span style="color: #7f9f7f;"&gt;// &lt;/span&gt;&lt;span style="color: #7f9f7f;"&gt;or&lt;/span&gt;

&lt;span style="color: #8cd0d3;"&gt;void&lt;/span&gt; &lt;span style="color: #8cd0d3;"&gt;push&lt;/span&gt;( &lt;span style="color: #8cd0d3;"&gt;float&lt;/span&gt; &lt;span style="color: #dfaf8f;"&gt;obj_to_push&lt;/span&gt; )
{
   current_index++;
   stack_data[current_index] = obj_to_push;
}

&lt;/pre&gt;


&lt;p&gt;  
  They do not do the same thing.
  The post-fix increment operator is evaluated &lt;i&gt;after&lt;/i&gt; the assignment operator.
  Encouraging code golf with line limits encourages language constructs that,
  while clever and loved by language lawyers, 
  are a pitfall for the creation of bugs.
&lt;/p&gt;
&lt;p&gt;
  Why then are programs graded according to criteria that at times are
  only tangentially related to good programming and at other times are
  actually opposed to proper coding?
  It would seem that the university system feels a need to conform
  programming into the standardized testing/grading paradigm currently
  embraced by many educational institutions, but has failed to quantify
  good programming practices.
&lt;/p&gt;
&lt;p&gt;
  How then, do we teach proper coding to students still struggling
  to master even the simplest aspects of programming such as language syntax?
  To be honest, I do not have an answer, and it would be preposterous if I
  purported to be qualified to propose proper pedagogical procedures.
  One thing I have noticed, however, is the inordinate about of time spent
  learning language-specific constructs ( where the semi-colon goes )
  in courses that advertise themselves
  as being about things such as "data structures".
&lt;/p&gt;
&lt;p&gt;
  Perhaps the way to go is to use a language with little syntax such as
  Scheme.
  Hal Abelson and Gerald Jay Sussman employed such a method in their
  book &lt;a href="http://mitpress.mit.edu/sicp/"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; and their MIT course
  by the same name ( video lectures can be found &lt;a href="http://archive.org/details/mit_ocw_sicp"&gt;here&lt;/a&gt;).
  Roughly one lecture covered the syntax of Scheme, rather than half of 
  a semester using, say, Java ( as an aside, I would have to posit that
  Java's object reference system cannot be properly understood without
  first understanding the idea of pointers in a language such as C).
&lt;/p&gt;</content></entry>
</feed>
